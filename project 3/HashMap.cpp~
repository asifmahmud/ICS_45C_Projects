#include <iostream>
#include "HashMap.hpp"


unsigned int Hash(const std::string& key)
{
	unsigned int string_count = 0;
	for (unsigned int i = 0; i < key.length(); i++)
	{
		string_count += (int)key[i];
	}
	return string_count;
}


HashMap::HashMap()
	:hashFunction(Hash), bucket_count(INITIAL_BUCKET_COUNT) //HashTable(new Node[INITIAL_BUCKET_COUNT])
{
	for (unsigned int i = 0; i < bucket_count; i++)
	{
		HashTable[i] = new Node;
		HashTable[i]->key = "none";
		HashTable[i]->value = "none";
		HashTable[i]->next = NULL;
	}
}

HashMap::HashMap(HashFunction hashFunction)
	:hashFunction(hashFunction), bucket_count(INITIAL_BUCKET_COUNT)//HashTable(new Node[INITIAL_BUCKET_COUNT])
{
	for (unsigned int i = 0; i < bucket_count; i++)
	{
		HashTable[i] = new Node;
		HashTable[i]->key = "none";
		HashTable[i]->value = "none";
		HashTable[i]->next = NULL;
	}
}

HashMap::~HashMap()
{

	delete *HashTable;
}

void HashMap::hash_copy(Node* target, Node* source, unsigned int size)
{
	for (unsigned int i = 0; i < size; i++)
	{
		target[i] = source[i];
	}
}




unsigned int HashMap::proper_index(unsigned int index) const
{
	unsigned int hash_index = index % bucket_count;
	return hash_index;
}



int HashMap::index_items(int index) const
{
	int counter = 0;
	if (HashTable[index]->key == "none")
	{
		return counter;
	}
	else
	{
		counter++;
		Node* node = HashTable[index];
		while (node->next != NULL)
		{
			counter++;
			node = node->next;
		}
	}
	return counter;
}


int HashMap::number_of_items() const
{
	int counter = 0;
	for (int i = 0; i < bucket_count; i++)
	{
		counter += index_items(i);
	}
	return counter;
}



double HashMap::loadFactor() const
{
	return number_of_items() / bucket_count;
}


void HashMap::add(const std::string& key, const std::string& value)
{

	int index = proper_index(hashFunction(key));

	
	if (loadFactor() >= 0.8)
	{
		unsigned int new_bucket_count = bucket_count * 2 + 1;

		Node* new_hash_table = new Node[new_bucket_count];

		hash_copy(new_hash_table, *HashTable, bucket_count);
		bucket_count = new_bucket_count;

		delete[] *HashTable;

		*HashTable = new_hash_table;

	}

	if (HashTable[index]->key == "none")
	{
		HashTable[index]->key = key;
		HashTable[index]->value = value;

	}
	else
	{
		Node* node = HashTable[index];
		Node* n = new Node;
		n->key = key;
		n->value = value;
		n->next = NULL;
		while (node->next != NULL)
		{
			node = node->next;
		}
		node->next = n;
	}
}

HashMap::HashMap(const HashMap& hm)
	:hashFunction(hm.hashFunction), bucket_count(hm.bucket_count)
{
	Node* HashTable = new Node[hm.bucket_count];
	hash_copy(HashTable, *hm.HashTable, bucket_count);
}


HashMap& HashMap::operator=(const HashMap& hm)
{
	if (this != &hm)
	{

		Node* new_hash_table = new Node[hm.bucket_count];

		hash_copy(new_hash_table, *hm.HashTable, bucket_count);
		bucket_count = hm.bucket_count;

		delete[] *HashTable;

		*HashTable = new_hash_table;
	}
	return *this;
}


bool HashMap::contains(const std::string& key) const
{
	int index = proper_index(hashFunction(key));
	if (HashTable[index]->key == "none")
	{
		return false;
	}
	Node* node = HashTable[index];
	if (node->key == key)
	{
		return true;
	}
	else
	{
		while (node != NULL)
		{
			if (node->key == key)
			{
				return true;
			}
			node = node->next;
		}
	}
	return false;
	
}



void HashMap::remove(const std::string& key)
{
	if (contains(key))
	{
		int index = proper_index(hashFunction(key));
		if (HashTable[index]->key == key)
		{
			HashTable[index]->key = "none";
			HashTable[index]->value = "none";
		}
		else
		{
			Node* node = HashTable[index];
			while (node->next != NULL)
			{
				if (node->key == key)
				{
					node->key = "none";
					node->value = "none";
					delete node;
				}
				node = node->next;
			}
		}
	}
}

std::string HashMap::value(const std::string& key) const
{
	if (contains(key))
	{
		int index = proper_index(hashFunction(key));
		if (HashTable[index]->key == key)
		{
			return HashTable[index]->value;
		}
		else
		{
			Node* node = HashTable[index];
			while (node->next != NULL)
			{
				if (node->key == key)
				{
					return node->value;
				}
				node = node->next;
			}
		}
	}
	else
	{
		return "";
	}
}


unsigned int HashMap::size() const
{
	return number_of_items();
}

unsigned int HashMap::bucketCount() const
{
	return bucket_count;
}

unsigned int HashMap::maxBucketSize() const
{
	unsigned int max_bucket, saved_bucket;
	max_bucket = index_items(0);

	for (unsigned int i = 1; i < bucket_count; i++)
	{
		saved_bucket = index_items(i);
		if (saved_bucket > max_bucket)
		{
			max_bucket = saved_bucket;
		}
		saved_bucket = 0;
	}
	return max_bucket;
}

void HashMap::index_remove(unsigned int index)
{
	if (index_items(index) == 1)
	{
		HashTable[index]->key = "none";
		HashTable[index]->value = "none";
	}
	else if (index_items(index) > 1)
	{
		Node* node = HashTable[index];
		while (node->next != NULL)
		{
			node->key = "none";
			node->value = "none";
			node = node->next;
		}
	}
}

void HashMap::clear()
{
	for (unsigned int i = 0; i < bucket_count; i++)
	{
		index_remove(i);
	}
}

